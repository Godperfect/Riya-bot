const axios = require('axios'); const childProcess = require("child_process"); const fs = require("fs"); const path = require("path"); const tmpFolder = './temp'; if (!fs.existsSync(tmpFolder)) { fs.mkdirSync(tmpFolder); } async function GetOutputYt(url) { try { const payload = { url: url, isAudioOnly: false, filenamePattern: "pretty", }; const curlCommand = `curl -X POST \ https://cnvmp3.com/fetch.php \ -H 'Content-Type: application/json' \ -d '${JSON.stringify(payload)}'`; const output = childProcess.execSync(curlCommand); const jsonData = JSON.parse(output.toString()); const videoDownloadUrl = jsonData.url; const filename = `${Date.now()}.mp4`; const filePath = path.join(tmpFolder, filename); const downloadCommand = `curl -o "${filePath}" "${videoDownloadUrl}"`; childProcess.execSync(downloadCommand); return filePath; } catch (error) { console.error("Error in GetOutputYt:", error); throw error; } } var url; module.exports = { config: { name: 'autolink', version: '1.3.7', author: 'Shikaki', countDown: 5, role: 0, description: 'Auto video downloader for Instagram, Facebook, TikTok, Twitter and Youtube, etc.', category: 'media', guide: { en: "{pn} -> This will tell you whether autolink is on or off in that place.\n\n{pn} {{[on | off]}} -> This will either turn on or off the autolink in the place.", }, autolinkon: "✅ Autolink is already enabled.\n\nTo disable it, use:\n{pn}autolink off.", autolinkoff: "❌ Autolink is currently disabled.\n\nTo enable it, use:\n{pn}autolink on.", }, onStart: async function ({ event, message, args, prefix }) { const threadID = event.threadID; const autolinkFile = 'autolink.json'; let autolinkData = {}; if (fs.existsSync(autolinkFile)) { autolinkData = JSON.parse(fs.readFileSync(autolinkFile, 'utf8')); } else { autolinkData = {}; } if (!autolinkData[threadID]) { autolinkData[threadID] = false; fs.writeFileSync(autolinkFile, JSON.stringify(autolinkData, null, 2)); } if (!args[0]) { const autolinkStatus = autolinkData[threadID]; if (autolinkStatus) { return message.reply(this.config.autolinkon.replace(/{pn}/g, prefix)); } else { return message.reply(this.config.autolinkoff.replace(/{pn}/g, prefix)); } } if (args[0].toLowerCase() === "on") { autolinkData[threadID] = true; fs.writeFileSync(autolinkFile, JSON.stringify(autolinkData, null, 2)); return message.reply("✅ Autolink has been turned on here."); } else if (args[0].toLowerCase() === "off") { autolinkData[threadID] = false; fs.writeFileSync(autolinkFile, JSON.stringify(autolinkData, null, 2)); return message.reply("❌ Autolink has been turned off here."); } }, onChat: async function ({ message, event, api }) { const threadID = event.threadID; const autolinkFile = 'autolink.json'; let autolinkData = {}; if (fs.existsSync(autolinkFile)) { autolinkData = JSON.parse(fs.readFileSync(autolinkFile, 'utf8')); } const autolinkStatus = autolinkData[threadID]; if (!autolinkStatus) return; if (event.body == "") { if (event.attachments[0].type == "share") { if (event.attachments[0].styleList.includes('avatar')) { return; } let url; if (event.attachments[0].url.includes("permalink.php")) { url = event.attachments[0].subattachments[0].url; } else { url = event.attachments[0].url; } if (url.includes("l.facebook.com") && url.includes("instagram.com")) { url = url.slice(url.indexOf("https%3A%2F%2Fwww.instagram.com") + 12, url.indexOf("&h=")).replace("%2F", "/"); } api.setMessageReaction("⌛", event.messageID, () => { }, true); let apiKeyData = {}; try { if (!apiKeyData.key) { const apiKeyResponse = await axios.get("http://www.hungdev.id.vn/getApiKey"); apiKeyData = apiKeyResponse.data.data; } console.log(apiKeyData); const apiUrl = `http://www.hungdev.id.vn/media/downaio?apikey=${apiKeyData.key}&url=${encodeURIComponent(url)}`; const response = await axios.get(apiUrl); const videoUrl = response.data.data.medias[0].url; await message.reply({ attachment: await global.utils.getStreamFromURL(videoUrl) }); } catch (err) { console.error("An error occurred:", err); if (err.response && err.response.data && err.response.data.message && err.response.data.message.includes("invalid")) { apiKeyData = {}; } api.setMessageReaction("❌", event.messageID, () => { }, true); } } } else { url = event.body; if (url.includes("instagram.com")) { if (url === "instagram.com" || url === "https://instagram.com" || url === "http://instagram.com" || url === "www.instagram.com" || url === "https://www.instagram.com" || url === "http://www.instagram.com") { return; } api.setMessageReaction("⌛", event.messageID, () => { }, true); let apiKeyData = {}; try { if (!apiKeyData.key) { const apiKeyResponse = await axios.get("http://www.hungdev.id.vn/getApiKey"); apiKeyData = apiKeyResponse.data.data; } console.log(apiKeyData); const apiUrl = `http://www.hungdev.id.vn/media/downaio?apikey=${apiKeyData.key}&url=${encodeURIComponent(url)}`; const response = await axios.get(apiUrl); const videoUrl = response.data.data.medias[0].url; await message.reply({ body: `Title: ${response.data.data.title}\n\nBy: ${response.data.data.author} `, attachment: await global.utils.getStreamFromURL(videoUrl) }); } catch (err) { console.error("An error occurred:", err); if (err.response && err.response.data && err.response.data.message && err.response.data.message.includes("invalid")) { apiKeyData = {}; } api.setMessageReaction("❌", event.messageID, () => { }, true); } } else if (url.includes("facebook.com") || url.includes("https://fb.watch")) { if (url === "facebook.com" || url === "https://facebook.com" || url === "http://facebook.com" || url === "www.facebook.com" || url === "https://www.facebook.com" || url === "http://www.facebook.com" || url === "fb.watch" || url === "https://fb.watch" || url === "https://www.facebook.com/profile") { return; } if (event.attachments[0].styleList.includes('avatar')) { return; } api.setMessageReaction("⌛", event.messageID, () => { }, true); let url1; if (event.attachments[0].subattachments.length > 0) { url1 = event.attachments[0].subattachments[0].url; } else { url1 = event.attachments[0].url; } console.log(url1); if (url1.includes("l.facebook.com") && url1.includes("instagram.com")) { url1 = url1.slice(url1.indexOf("https%3A%2F%2Fwww.instagram.com") + 12, url1.indexOf("&h=")).replace("%2F", "/"); } api.setMessageReaction("⌛", event.messageID, () => { }, true); let apiKeyData = {}; try { if (!apiKeyData.key) { const apiKeyResponse = await axios.get("http://www.hungdev.id.vn/getApiKey"); apiKeyData = apiKeyResponse.data.data; } console.log(apiKeyData); const apiUrl = `http://www.hungdev.id.vn/media/downaio?apikey=${apiKeyData.key}&url=${encodeURIComponent(url1)}`; const response = await axios.get(apiUrl); const videoUrl = response.data.data.medias[0].url; await message.reply({ body: `Title: ${response.data.data.title}\n\nBy: ${response.data.data.author} `, attachment: await global.utils.getStreamFromURL(videoUrl) }); } catch (err) { console.error("An error occurred:", err); if (err.response && err.response.data && err.response.data.message && err.response.data.message.includes("invalid")) { apiKeyData = {}; } api.setMessageReaction("❌", event.messageID, () => { }, true); } } else if (url.includes("tiktok.com")) { if (url === "tiktok.com" || url === "https://tiktok.com" || url === "http://tiktok.com" || url === "www.tiktok.com" || url === "https://www.tiktok.com" || url === "http://www.tiktok.com") { return; } api.setMessageReaction("⌛", event.messageID, () => { }, true); let apiKeyData = {}; try { if (!apiKeyData.key) { const apiKeyResponse = await axios.get("http://www.hungdev.id.vn/getApiKey"); apiKeyData = apiKeyResponse.data.data; } const apiUrl = `http://www.hungdev.id.vn/media/downaio?apikey=${apiKeyData.key}&url=${encodeURIComponent(url)}`; const response = await axios.get(apiUrl); const videoUrl = response.data.data.medias[0].url; let body = `Title: ${response.data.data.title}\nBy: ${response.data.data.author}\n`; await message.reply({ body: body, attachment: await global.utils.getStreamFromURL(videoUrl) }); } catch (err) { console.error(err); try { const apiUrl = `http://dongdev.click/api/down/media?url=${encodeURIComponent(url)}`; const response = await axios.get(apiUrl); const videoUrl = response.data.attachments[0].url; function formatCount(count) { if (!count) return null; const num = parseFloat(count.replace(/,/g, '')); if (num >= 1000000) { return `${(num / 1000000).toFixed(1)}M`; } else if (num >= 1000) { return `${(num / 1000).toFixed(1)}K`; } else { return num.toString(); } } const views = formatCount(response.data.stats.views); const likes = formatCount(response.data.stats.likes); const comments = formatCount(response.data.stats.comments); const shares = formatCount(response.data.stats.shares); const collects = formatCount(response.data.stats.collects); let body = `Title: ${response.data.message}\nBy: ${response.data.author.name}\n`; if (views) body += `Views: ${views}\n`; if (likes) body += `Likes: ${likes}\n`; if (comments) body += `Comments: ${comments}\n`; if (shares) body += `Shares: ${shares}\n`; if (collects) body += `Collects: ${collects}\n`; body += `Uploaded: ${response.data.createTime}`; await message.reply({ body: body, attachment: await global.utils.getStreamFromURL(videoUrl) }); } catch (error) { api.setMessageReaction("❌", event.messageID, () => { }, true); console.error(error) } return; } } else if (url.includes("x.com") || url.includes("twitter.com")) { if (url === "x.com" || url === "https://x.com" || url === "https://twitter.com" || url === "www.x.com" || url === "twitter.com" || url === "www.twitter.com") { return; } api.setMessageReaction("⌛", event.messageID, () => { }, true); let apiKeyData = {}; try { if (!apiKeyData.key) { const apiKeyResponse = await axios.get("http://www.hungdev.id.vn/getApiKey"); apiKeyData = apiKeyResponse.data.data; } console.log(apiKeyData); const apiUrl = `http://www.hungdev.id.vn/media/downaio?apikey=${apiKeyData.key}&url=${encodeURIComponent(url)}`; const response = await axios.get(apiUrl); const videoUrl = response.data.data.medias[0].url; await message.reply({ body: `Title: ${response.data.data.title}\n\nBy: ${response.data.data.author} `, attachment: await global.utils.getStreamFromURL(videoUrl) }); } catch (err) { console.error("An error occurred:", err); if (err.response && err.response.data && err.response.data.message && err.response.data.message.includes("invalid")) { apiKeyData = {}; } api.setMessageReaction("❌", event.messageID, () => { }, true); } } else if (url.includes("youtube.com") || url.includes("youtu.be")) { if (url === "youtube.com" || url === "https://youtube.com" || url === "http://youtube.com" || url === "www.youtube.com" || url === "https://www.youtube.com" || url === "http://www.youtube.com" || url === "youtu.be" || url === "https://youtu.be" || url === "http://youtu.be") { return; } api.setMessageReaction("⌛", event.messageID, () => { }, true); try { const filePath = await GetOutputYt(url); await message.reply({ attachment: fs.createReadStream(filePath) }); fs.unlinkSync(filePath); } catch (err) { api.setMessageReaction("❌", event.messageID, () => { }, true); console.error(`Error: ${err.message}`); return; } } else { return; } } } }